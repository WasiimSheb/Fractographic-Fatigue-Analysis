import cv2
import numpy as np
import os
import pandas as pd

"""
Description:
This script calculates the internal area covered by each color-coded region 
(dark red, red, yellow, cyan, blue) in metallurgical specimen heatmaps using 
pre-generated binary masks. For each mask:

1. The exact number of pixels (area) is counted directly from the binary mask.
2. The physical area in micrometersÂ² is computed using a known pixel-to-micron scaling factor.
3. Overlay images are generated by drawing the detected region on the original heatmap.
4. A structured CSV file is produced containing:
    - Area in pixelsÂ²
    - Area in micrometersÂ²
    - Scaling factor (Î¼mÂ²/pixelÂ²)
    - For all five colors, per specimen.

"""
# === Base Paths ===
base_path = "C:\\Users\\shifa\\final project\\Enternal_Contours"
input_folders = {
    "dark_red": os.path.join(base_path, "Dark Red", "DarkRed_Contours-SLM-P1", "contour_masks"),
    "red": os.path.join(base_path, "Red", "Red_Contours-SLM-P1", "contour_masks"),
    "yellow": os.path.join(base_path, "Yellow", "yellow_Contours-SLM-P1", "contour_masks"),
    "cyan": os.path.join(base_path, "cyan", "cyan_Crack-SLM-P1", "contour_masks"),
    "blue": os.path.join(base_path, "Blue", "blue_Contours-SLM-P1", "ellipse_masks")
}
image_folder = os.path.join(base_path, "SLM-P1-CrackZone-NEW")
overlay_base_folder = os.path.join(base_path, "Overlays")
os.makedirs(overlay_base_folder, exist_ok=True)

# === Mask File Suffixes ===
MASK_SUFFIXES = {
    "dark_red": "_heatmap_highlighted_darkred_mask.png",
    "red": "_heatmap_highlighted_red_mask.png",
    "yellow": "_heatmap_highlighted_envelope_mask.png",
    "cyan": "_heatmap_highlighted_crackzone_mask.png",
    "blue": "_heatmap_highlighted_ellipse_mask.png"
}

# === Create Overlay Subfolders ===
overlay_folders = {}
for color in input_folders:
    folder = os.path.join(overlay_base_folder, f"{color}_overlays")
    os.makedirs(folder, exist_ok=True)
    overlay_folders[color] = folder

# === Constants ===
PIXEL_SIZE_MICRONS = 1.34375
MICRON_AREA_FACTOR = PIXEL_SIZE_MICRONS ** 2
SCALE_VALUE = round(MICRON_AREA_FACTOR, 8)

results = {}

# === Process Each Mask ===
for color, folder in input_folders.items():
    for fname in os.listdir(folder):
        if not fname.endswith(".png"):
            continue
        mask_path = os.path.join(folder, fname)
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
        if mask is None:
            continue

        base_name = fname.replace(MASK_SUFFIXES[color], "")
        image_name = base_name + "_heatmap_highlighted.png"
        image_path = os.path.join(image_folder, image_name)

        if not os.path.exists(image_path):
            print(f"âš  Image not found for {image_name}")
            continue

        img = cv2.imread(image_path)

        # âœ… Accurate pixel area from binary mask:
        area_pixels = cv2.countNonZero(mask)
        area_microns = area_pixels * MICRON_AREA_FACTOR

        sample = base_name
        if sample not in results:
            results[sample] = {
                "specimen": sample,
                "pixels": {},
                "micrometers": {},
                "scale": {}
            }

        results[sample]["pixels"][color] = area_pixels
        results[sample]["micrometers"][color] = area_microns
        results[sample]["scale"][color] = SCALE_VALUE

        # Save overlay
        overlay = img.copy()
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            largest = max(contours, key=cv2.contourArea)
            cv2.drawContours(overlay, [largest], -1, (0, 0, 0), thickness=10)
        out_path = os.path.join(overlay_folders[color], f"{sample}_{color}_overlay.png")
        cv2.imwrite(out_path, overlay)

# === Convert to DataFrame ===
records = []
for sample, data in results.items():
    row = [sample]
    for c in ["dark_red", "red", "yellow", "cyan", "blue"]:
        row.append(data["pixels"].get(c, 0))
    for c in ["dark_red", "red", "yellow", "cyan", "blue"]:
        row.append(data["micrometers"].get(c, 0))
    for c in ["dark_red", "red", "yellow", "cyan", "blue"]:
        row.append(data["scale"].get(c, 0))
    records.append(row)

multi_columns = [
    ("", "specimen"),
    ("Pixles", "dark_red"), ("Pixles", "red"), ("Pixles", "yellow"), ("Pixles", "cyan"), ("Pixles", "blue"),
    ("micrometer^2", "dark_red"), ("micrometer^2", "red"), ("micrometer^2", "yellow"), ("micrometer^2", "cyan"), ("micrometer^2", "blue"),
    ("scale factor", "dark_red"), ("scale factor", "red"), ("scale factor", "yellow"), ("scale factor", "cyan"), ("scale factor", "blue")
]

df = pd.DataFrame(records, columns=pd.MultiIndex.from_tuples(multi_columns))
output_csv = os.path.join(base_path, "Internal_Contour_Areas_FromMasks_Structured.csv")
df.to_csv(output_csv, index=False)

print("\nðŸŽ¯ Done! Exact pixel-based CSV + overlays saved to 'Overlays' and CSV.")
